About
Hi, I'm Prab!
I'm an aspiring software engineer and a second year BEng Computing student at Imperial College London.
I have a strong interest into Machine Learning and Distributed Systems, with a focus on back-end development. My main languages are Java and Python. As part of studies and interest, I have also experimented with C, Haskell and Kotlin.
This personal website outlines some of my past and on-going projects and experiences over the last few years. My CV is linked below, but you can find more details on my work lower down.
Feel free to get in touch with me via Email, or send me a message on LinkedIn!
Here are some helpful links:

Projects
ARM Group Project
An implementation of an emulator and assembler for the ARMv6 instruction set written in C, running on a Raspberry Pi.
Additionally had an extension of Connect Four, displaying the game on a hand-made LED-matrix controller by the GPIO pins.
Furthermore, I implemented a Monte Carlo Tree Search algorithm for the "Computer's" decision logic in the game.
Unfortunately, by request of the university for plaigarism purposes, the repository cannot be public. If you are interested in viewing the repository, please don't hesitate to contact me!
--Reveal--
Given a Raspberry-Pi which was based off of the same ARM architecture, we were first tasked as a group of 4 to create an emulator that could execute the instructions given in the format of a binary file which covered the whole range of processing, data-transferring, and branching instructions. The program utilised a multi-stage pipeline operating on an anonymous union of structs (representing the current instruction). Thus the instructions had to be initially parsed, and then executed according to flags and register shifts.
The assembler used a similar format to represent each instruction and operated using a multi-pass method as to be able to calculate memory locations. The hardest task was being able to parse the given strings of assembly instructions and tokenise them, in order to parse them correctly to the correct binary representation (making sure to also set the correct flags and register calculations).
For the extension we quickly created a simple game of Connect-Four. We then added in functionality to display the game on a custom PCB and hand-made LED-matrix. I also decided to implement a "Computer" to play against, and decided to use the Monte Carlo Search Tree algorithm in order to traverse the current decision space for each move the computer made. Once implemented, even at just 10,000 iterations, it remained unbeatable.
All of the tasks ran on the Raspberry-Pi and so we made sure to optimise for speed and heavily reduce memory usage. With manual data-allocation and freeing, we were able to reduce our memory usage significantly, as well as by making use of data structures such as anonymised unions rather than having several unused struct members.

eduCATe - IC Hack 19
Designed a scheduling application with built-in messaging and file-sharing abilities, targeted at the workplace and education institutes.
The front-end was an Android application built in Android Studio using Java.
Talked to a LAMP-stack webserver that stored and handled messages and users, passing data using JSON files.
--Reveal--
Inspired by the confusing number of tasks and assignments we were face during our time at school and university, decided to create an aid to help schedule time to complete those tasks, keep reminders on upcoming assessments, as well as serve as a platform to discuss those assignments.
Messaging would work in threads, similar to the structure built into Slack, and would allow messages to contain text content or for a file to be uploaded and sent. Each assignment and/or module would contain its own channel for sake of organising chats and streamlining the process of effectively spreading and receiving information relating to a certain assignment. This would be more effective than questions being lost in random conversation of large, generic group chats.
I was familiar with Android Studio, and so built the user-facing UI and also handled the parsing of data from JSON to usable data, that would be sent to and recieved from the server.
The server was able to store users and link them to certain channels, threads and messages. It also handled creation and authentication of users.
Unfortunately, despite both front and back-end having working data-parsing functionality, the app was unable to connect to the endpoint given the methods we had tried in the time constraints.

VitaTrak - Android Health Tracker
Created an Android application to track and visulaise a user's data on a variety of health-related metrics.
I used Android Studio for the implementation after an initial design and research phase, and analysis of the different platforms available. Then proceeded to work with an agile model, with a focus group of clients I liased with at regular intervals during the project.
Used Java and SQLite for the main infrastructure and back-end design of the application. Self-taught myself the necessary languages and libraries.
If you would like to see the project's stages and corresponding docuemnts, see the link below:
--Reveal--
Project developed as part of my Computer Science A-Level, during which I had learnt to work with Python. With my idea for the project I decided to take it upon myself to learn a new language to work with as researching graphical interfaces with Python yielded not many simple solutions to migrate to a mobile platform.
Thus after market research and analysis of implementation options, I had three main possibilities: iOS application using Swift, Android application using Java, a web-based application. Due to unfamiliarity with web-based platforms at the time, and no permanent developer access to an Apple &trade; device, I decided to use Android Studio and learn how to develop with Java. Additionally, it gave me the opportunity to work with a more traditional object-orientated programming language.
I made extensive use of the Android documentation and some third-party libraries for tasks such as visualising graphs. Furthermore, I self-taught myself the structure and concepts of databases, including how to create, manage and query a database stored on-device on Android with SQLite.
Once the project was complete, I wrote an extensive documentation docuemnt on each section of the code, detailing the function of each class, method, or code snippets. Lastly, I wrote an evaluation report outlining constructive criticism of my own work, shortcomings and possible improvements and future features.

Extended Project Qualification
An Explanation of Machine Learning through Neural Networks and the possibilities and limitations of its implementation
This was an independent research project that I undertook during my A-Level studies.
Being completely new to the concepts of AI as a whole, I researched and gathered information on a few branches that particularly interested me, and reported my findings and understandings in a report.
As well as a report, I had to present my findings to the public and project supervisors, showing off demonstrations using the MNIST dataset, as well as a Recurrent Neural Network training off of the works of William Shakespeare.
If you would like to see the final document, see the link below:
--Reveal--
After being introduced to the concept of Machine Learning and biologically-influenced computational techniques, I immediately took an interest into the topic and formalised it through this project.
I conducted some initial research by watching lectures from university courses such as MIT, as well as conferences displaying bleeding edge technology such as Google Cloud. With a basic understanding and equipped with the sorts of concepts and fundamentals that exist, I then began formally researching them through videos, news stories, as well as projects and implementations of the technology.
Neural Networks took a particular interest to me during my research. I learnt their fundamentals and mathematical operations (activation and loss functions), as well as the processes when dealing with a whole network such as backpropagation during training. While looking at newly introduced technologies, I also learnt about a variety of the issues that are faced when implementing Neural Networks - overfitting, class-variability, vanishing gradient.
Taking the understanding I had accumulated, I started to look at some practical work, building a simple classifier with the MNIST data set, as well as looking at how more complex solutions were structured and developed.
One of the most interesting demonstrations I looked at was a 3-layer Recurrent Neural Network, that was being fed the plays of William Shakespeare. And then once trained, it was able to generate new scripts for any given length. It was able to not only correctly format for a script with stage directions, but also generate new character names with the correct capitalisations and emphasis. When I displayed this running in real time at my presentation, it struck people with a real glimpse into what the technology is possible of.


Experience
Fire Tech
-Summer 2019
At Fire Tech, I was one of a handful of tutors running a summer courses in Cambridge with a focus on technology and coding. Together we managed around 25-40 children each week, ageing from 8-17 years old.
My role involved the general running of the camp each day, as well as delivering and preparing course content to groups of size from 3-16. The courses I taught included:
-Python - taught fundamentals of programming complimented by using a varierty of libraries and hardware: used a  BBC micro:bit, PyGame Zero, mcpi (Minecraft: Pi Edition Python API).
-Java - taught the concepts of classes, objects, methods and inheritance; this was more practically visualised and implemented by creating games with Greenfoot.
-Electronics - Emulated a Raspberry Pi on a laptop, and utilised an Arduino(Pro Micro) and its I/O pins to simulate the GPIO pins. Created a variety of circuits on breadboards that interfaced with Python and some third-party libraries.
