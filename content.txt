About
Hi, I'm Prab!
I'm an aspiring software engineer and a second year BEng Computing student at Imperial College London.
I have a strong interest into Machine Learning and Distributed Systems, with a focus on back-end development. My main languages are Java and Python. As part of studies and interest, I have also experimented with C, Haskell and Kotlin.
This personal website outlines some of my past and on-going projects and experiences over the last few years. My CV is linked below, but you can find more details on my work lower down.
Feel free to get in touch with me via Email, or send me a message on LinkedIn!
Here are some helpful links:

Projects
ARM Group Project
An implementation of an emulator and assembler for the ARMv6 instruction set written in C, running on a Raspberry Pi.
Additionally had an extension of Connect Four, displaying the game on a hand-made LED-matrix controller by the GPIO pins.
Furthermore, I implemented a Monte Carlo Tree Search algorithm for the "Computer's" decision logic in the game.
--Reveal--
Given a Raspberry-Pi which was based off of the same ARM architecture, we were first tasked as a group of 4 to create an emulator that could execute the instructions given in the format of a binary file which covered the whole range of processing, data-transferring, and branching instructions. The program utilised a multi-stage pipeline operating on an anonymous union of structs (representing the current instruction). Thus the instructions had to be initially parsed, and then executed according to flags and register shifts.
The assembler used a similar format to represent each instruction and operated using a multi-pass method as to be able to calculate memory locations. The hardest task was being able to parse the given strings of assembly instructions and tokenise them, in order to parse them correctly to the correct binary representation (making sure to also set the correct flags and register calculations).
For the extension we quickly created a simple game of Connect-Four. We then added in functionality to display the game on a custom PCB and hand-made LED-matrix. I also decided to implement a "Computer" to play against, and decided to use the Monte Carlo Search Tree algorithm in order to traverse the current decision space for each move the computer made. Once implemented, even at just 10,000 iterations, it remained unbeatable.
All of the tasks ran on the Raspberry-Pi and so we made sure to optimise for speed and heavily reduce memory usage. With manual data-allocation and freeing, we were able to reduce our memory usage significantly, as well as by making use of data structures such as anonymised unions rather than having several unused struct members.

eduCATe - IC Hack 19

